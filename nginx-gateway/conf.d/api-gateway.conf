upstream mlflow_backend {
    server 172.18.0.9:5000;
}

upstream feast_backend {
    server feast:6566;
}
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=oauth:10m rate=5r/s;

map $http_origin $cors_origin {
    default                          "";
    "http://localhost:3000"         $http_origin;
    "http://localhost:3001"         $http_origin;
}

map $http_authorization $jwt_token {
    ~^Bearer\s+(.+)$ $1;
    default "";
}

server {
    listen 8080;
    server_name localhost;

    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";

    add_header Access-Control-Allow-Origin "http://localhost:3000" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
    add_header Access-Control-Allow-Credentials true always;

    location / {
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "http://localhost:3000" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
            add_header Access-Control-Allow-Credentials true always;
            add_header Content-Length 0 always;
            add_header Content-Type text/plain always;
            return 204;
        }
        return 200 '{"message":"API Gateway is running","endpoints":["/health","/oauth/authorize","/oauth/callback","/oauth/token","/mlflow/*","/feast/*"]}';
        add_header Content-Type application/json;
    }

    location /health {
        access_log off;
        add_header Content-Type application/json always;
        add_header Access-Control-Allow-Origin "http://localhost:3000" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
        add_header Access-Control-Allow-Credentials true always;
        return 200 '{"status":"healthy","timestamp":"$time_iso8601","service":"nginx-gateway"}';
    }

    location /oauth/authorize {
        limit_req zone=oauth burst=10 nodelay;
        content_by_lua_file /usr/local/openresty/nginx/lua/oauth_authorize.lua;
    }

    location /oauth/callback {
        limit_req zone=oauth burst=10 nodelay;
        content_by_lua_file /usr/local/openresty/nginx/lua/oauth_callback.lua;
    }

    location /oauth/token {
        limit_req zone=oauth burst=10 nodelay;
        content_by_lua_file /usr/local/openresty/nginx/lua/oauth_token.lua;
    }

    location = /oauth/me {
        limit_req zone=oauth burst=10 nodelay;
        content_by_lua_file /usr/local/openresty/nginx/lua/oauth_me.lua;
    }

    

    location /mlflow/experiments {
        limit_req zone=api burst=20 nodelay;
        
        access_by_lua_block {
            dofile("/usr/local/openresty/nginx/lua/jwt_validate.lua")
            dofile("/usr/local/openresty/nginx/lua/experiment_access_control.lua")
        }
        header_filter_by_lua_file /usr/local/openresty/nginx/lua/add_user_headers.lua;
        
        body_filter_by_lua_file /usr/local/openresty/nginx/lua/mlflow_response_filter.lua;
        
        proxy_pass http://mlflow_backend/experiments$is_args$args;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_buffering off;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
    }

    location = /mlflow {
        limit_req zone=api burst=20 nodelay;
        content_by_lua_file /usr/local/openresty/nginx/lua/mlflow_list_allowed.lua;
    }

    location ~* ^/mlflow/(ajax-api|api)/2\.0/(mlflow/)?experiments/search {
        limit_req zone=api burst=20 nodelay;
        access_by_lua_file /usr/local/openresty/nginx/lua/jwt_validate.lua;
        content_by_lua_file /usr/local/openresty/nginx/lua/mlflow_search_proxy.lua;
    }

    location ~* ^/mlflow/(ajax-api|api)/2\.0/mlflow/runs/search {
        limit_req zone=api burst=20 nodelay;
        access_by_lua_file /usr/local/openresty/nginx/lua/jwt_validate.lua;
        content_by_lua_file /usr/local/openresty/nginx/lua/mlflow_runs_proxy.lua;
    }

    location ~* ^/mlflow/(ajax-api|api)/2\.0/mlflow/artifacts/(list|download) {
        limit_req zone=api burst=20 nodelay;
        access_by_lua_file /usr/local/openresty/nginx/lua/jwt_validate.lua;
        content_by_lua_file /usr/local/openresty/nginx/lua/mlflow_artifacts_proxy.lua;
    }

    location ~ ^/mlflow/(ajax-api|api/2\.0)/ {
        limit_req zone=api burst=20 nodelay;
        
        access_by_lua_file /usr/local/openresty/nginx/lua/jwt_validate.lua;
        
        header_filter_by_lua_file /usr/local/openresty/nginx/lua/add_user_headers.lua;

        rewrite ^/mlflow/(.*)$ /$1 break;
        proxy_pass http://mlflow_backend;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_buffering off;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
    }

    location /mlflow/ {
        limit_req zone=api burst=20 nodelay;

        header_filter_by_lua_file /usr/local/openresty/nginx/lua/add_user_headers.lua;

        rewrite ^/mlflow/(.*)$ /$1 break;
        proxy_pass http://mlflow_backend;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_buffering off;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
    }

    location /feast/ {
        limit_req zone=api burst=20 nodelay;
        
        access_by_lua_file /usr/local/openresty/nginx/lua/jwt_validate.lua;
        
        header_filter_by_lua_file /usr/local/openresty/nginx/lua/add_user_headers.lua;
        
        proxy_pass http://feast_backend/;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_buffering off;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
    }

    location /feast/online-features {
        limit_req zone=api burst=20 nodelay;
        access_by_lua_file /usr/local/openresty/nginx/lua/jwt_validate.lua;
        header_filter_by_lua_file /usr/local/openresty/nginx/lua/add_user_headers.lua;
        proxy_pass http://feast_backend/get-online-features;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_buffering off;
    }

    location /docs {
        return 301 /swagger-ui/;
    }

    location /swagger-ui/ {
        alias /usr/share/nginx/html/swagger-ui/;
        try_files $uri $uri/ /swagger-ui/index.html;
    }

    location /openapi.json {
        content_by_lua_file /usr/local/openresty/nginx/lua/openapi_spec.lua;
    }

    error_page 401 /401.html;
    error_page 403 /403.html;
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    location = /401.html {
        internal;
        return 401 '{"error":"unauthorized","message":"Valid JWT token required"}';
        add_header Content-Type application/json;
    }

    location = /403.html {
        internal;
        return 403 '{"error":"forbidden","message":"Insufficient permissions"}';
        add_header Content-Type application/json;
    }

    location = /404.html {
        internal;
        return 404 '{"error":"not_found","message":"Endpoint not found"}';
        add_header Content-Type application/json;
    }

    location = /50x.html {
        internal;
        return 500 '{"error":"internal_server_error","message":"Internal server error"}';
        add_header Content-Type application/json;
    }
}
