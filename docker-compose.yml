services:
  # PostgreSQL Database
  postgres:
    image: postgres:14
    environment:
      POSTGRES_DB: mlops_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Feast Online Store
  redis:
    image: redis:6.2-alpine
    ports:
      - "6380:6379"
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MLflow Server (using official image)
  mlflow:
    image: python:3.9-slim
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://postgres:password@postgres:5432/mlflow
      MLFLOW_DEFAULT_ARTIFACT_ROOT: s3://mlflow-artifacts
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
    ports:
      - "5000:5000"
    command: >
      bash -c "
        pip install mlflow psycopg2-binary boto3 &&
        mlflow server 
          --backend-store-uri postgresql://postgres:password@postgres:5432/mlflow
          --default-artifacts-root s3://mlflow-artifacts
          --host 0.0.0.0
          --port 5000
      "
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Simple API Gateway (mock)
  api-gateway:
    image: python:3.9-slim
    environment:
      API_GATEWAY_PORT: 8080
    ports:
      - "8081:8080"
    command: >
      bash -c "
        pip install fastapi uvicorn &&
        python -c 'from fastapi import FastAPI; import uvicorn; app = FastAPI(); app.get(\"/health\")(lambda: {\"status\": \"healthy\"}); app.get(\"/oauth/token\")(lambda: {\"access_token\": \"mock_token\", \"token_type\": \"bearer\"}); app.get(\"/mlflow/{path:path}\")(lambda path: {\"message\": \"MLflow proxy\", \"path\": path}); uvicorn.run(app, host=\"0.0.0.0\", port=8080)'
      "
    depends_on:
      - mlflow
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Simple ModelCatalogue (mock)
  modelcatalogue:
    image: python:3.9-slim
    environment:
      MODELCATALOGUE_DB_URI: postgresql://postgres:password@postgres:5432/modelcatalogue
    ports:
      - "8080:8080"
    command: >
      bash -c "
        pip install fastapi uvicorn psycopg2-binary &&
        python -c 'from fastapi import FastAPI; import uvicorn; app = FastAPI(); app.get(\"/health\")(lambda: {\"status\": \"healthy\"}); app.get(\"/api/v1/models\")(lambda: {\"models\": []}); app.post(\"/api/v1/models\")(lambda model_data: {\"id\": \"model_123\", \"status\": \"created\"}); uvicorn.run(app, host=\"0.0.0.0\", port=8080)'
      "

    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jupyter Notebook for MLflow Pod
  mlflow-pod:
    image: jupyter/scipy-notebook:latest
    environment:
      MLFLOW_TRACKING_URI: http://api-gateway:8081/mlflow
      OAUTH_TOKEN: mock_token
    ports:
      - "8888:8888"
    volumes:
      - ./phase1-examples:/home/jovyan/work
      - ./phase1-workflows:/home/jovyan/workflows
    command: >
      bash -c "
        pip install mlflow requests &&
        start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''
      "
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  minio_data:

networks:
  mlops-network:
    driver: bridge
